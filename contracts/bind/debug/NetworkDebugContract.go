// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package network_debug_contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NetworkDebugContractAccount is an auto generated low-level Go binding around an user-defined struct.
type NetworkDebugContractAccount struct {
	Name       string
	Balance    uint64
	DailyLimit *big.Int
}

// NetworkDebugContractData is an auto generated low-level Go binding around an user-defined struct.
type NetworkDebugContractData struct {
	Name   string
	Values []*big.Int
}

// NetworkDebugContractNestedData is an auto generated low-level Go binding around an user-defined struct.
type NetworkDebugContractNestedData struct {
	Data         NetworkDebugContractData
	DynamicBytes []byte
}

// NetworkDebugContractMetaData contains all meta data concerning the NetworkDebugContract contract.
var NetworkDebugContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"CustomErr\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"}],\"name\":\"CallbackEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enumNetworkDebugContract.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"CurrentStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NoIndexEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"NoIndexEventString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"balance\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"dailyLimit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structNetworkDebugContract.Account\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"NoIndexStructEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"OneIndexEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataId\",\"type\":\"string\"}],\"name\":\"ThreeIndexAndOneNonIndexedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"ThreeIndexEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"}],\"name\":\"TwoIndexEvent\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"idx\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"addCounter\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alwaysRevertsAssert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alwaysRevertsCustomError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alwaysRevertsRequire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"callRevertFunctionInSubContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callRevertFunctionInTheContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"callbackMethod\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"counterMap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStatus\",\"outputs\":[{\"internalType\":\"enumNetworkDebugContract.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"emitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"input\",\"type\":\"bytes32\"}],\"name\":\"emitBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"output\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitFourParamMixedEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputVal1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"inputVal2\",\"type\":\"string\"}],\"name\":\"emitInputs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputVal1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"inputVal2\",\"type\":\"string\"}],\"name\":\"emitInputsOutputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"first\",\"type\":\"int256\"},{\"internalType\":\"int128\",\"name\":\"second\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"third\",\"type\":\"uint256\"}],\"name\":\"emitInts\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int128\",\"name\":\"outputVal1\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"outputVal2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputVal1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"inputVal2\",\"type\":\"string\"}],\"name\":\"emitNamedInputsOutputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputVal1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"outputVal2\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitNamedOutputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputVal1\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"outputVal2\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitNoIndexEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitNoIndexEventString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitNoIndexStructEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitOneIndexEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitOutputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitThreeIndexEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitTwoIndexEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"data\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"idx\",\"type\":\"int256\"}],\"name\":\"getCounter\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"data\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"data\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"input\",\"type\":\"address[]\"}],\"name\":\"processAddressArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"processDynamicData\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data[3]\",\"name\":\"data\",\"type\":\"tuple[3]\"}],\"name\":\"processFixedDataArray\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data[2]\",\"name\":\"\",\"type\":\"tuple[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"dynamicBytes\",\"type\":\"bytes\"}],\"internalType\":\"structNetworkDebugContract.NestedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"processNestedData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"dynamicBytes\",\"type\":\"bytes\"}],\"internalType\":\"structNetworkDebugContract.NestedData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"processNestedData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"structNetworkDebugContract.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"dynamicBytes\",\"type\":\"bytes\"}],\"internalType\":\"structNetworkDebugContract.NestedData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"processUintArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"idx\",\"type\":\"int256\"}],\"name\":\"resetCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"set\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"setMap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumNetworkDebugContract.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[{\"internalType\":\"enumNetworkDebugContract.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"storedDataMap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subContract\",\"outputs\":[{\"internalType\":\"contractNetworkDebugSubContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"trace\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"traceDifferent\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"traceSubWithCallback\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"traceYetDifferent\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200346e3803806200346e8339818101604052810190620000379190620000e9565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b18262000084565b9050919050565b620000c381620000a4565b8114620000cf57600080fd5b50565b600081519050620000e381620000b8565b92915050565b6000602082840312156200010257620001016200007f565b5b60006200011284828501620000d2565b91505092915050565b613343806200012b6000396000f3fe6080604052600436106102815760003560e01c80637f12881c1161014f578063ad3de14c116100c1578063e8116e281161007a578063e8116e2814610a0d578063ec5c3ede14610a4a578063ef8a923514610a87578063f3396bd914610ab2578063f499af2a14610adb578063fbcb8d0714610b18576102c1565b8063ad3de14c146108e8578063c0d06d8914610913578063c2124b221461093e578063d7a8020514610955578063e1111f7914610993578063e5c19b2d146109d0576102c1565b80639349d00b116101135780639349d00b146107fe57806395a81a4c1461081557806399adad2e1461082c5780639e09965214610869578063a4c0ed36146108a8578063aa3fdcf4146108d1576102c1565b80637f12881c146107185780637fdc8fe11461075557806381b375a0146107925780638db611be146107bb5780638f856296146107e7576102c1565b80633837a75e116101f35780635e9c80d6116101ac5780635e9c80d61461063f5780636284117d1461065657806362c270e1146106935780636d4ce63c146106aa5780637014c81d146106d5578063788c477214610701576102c1565b80633837a75e146104d05780633e41f1351461050d57806345f0c9e61461054a57806348ad9fe81461058857806358379d71146105c55780635921483f14610602576102c1565b80632351576011610245578063235157601461039a578063256560d5146103d75780632a1afcd9146103ee5780632e49d78b1461041957806330985bcc1461045657806333311ef314610493576102c1565b806306595f75146102fc57806311b3c4781461031357806312d912331461033c5780631b9265b8146103795780631e31d0a814610383576102c1565b366102c1577f59e04c3f0d44b7caf6e8ef854b61d9a51cf1960d7a88ff6356cc5e946b4b583233346040516102b79291906119cc565b60405180910390a1005b7f1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b33346040516102f2929190611a08565b60405180910390a1005b34801561030857600080fd5b50610311610b55565b005b34801561031f57600080fd5b5061033a60048036038101906103359190611a71565b610b98565b005b34801561034857600080fd5b50610363600480360381019061035e9190611c0a565b610c2b565b6040516103709190611d11565b60405180910390f35b610381610cea565b005b34801561038f57600080fd5b50610398610cec565b005b3480156103a657600080fd5b506103c160048036038101906103bc9190611d69565b610d33565b6040516103ce9190611db8565b60405180910390f35b3480156103e357600080fd5b506103ec610d68565b005b3480156103fa57600080fd5b50610403610d79565b6040516104109190611db8565b60405180910390f35b34801561042557600080fd5b50610440600480360381019061043b9190611df8565b610d7f565b60405161044d9190611e9c565b60405180910390f35b34801561046257600080fd5b5061047d60048036038101906104789190611d69565b610e01565b60405161048a9190611db8565b60405180910390f35b34801561049f57600080fd5b506104ba60048036038101906104b59190611eed565b610ee3565b6040516104c79190611f29565b60405180910390f35b3480156104dc57600080fd5b506104f760048036038101906104f29190611d69565b610eed565b6040516105049190611db8565b60405180910390f35b34801561051957600080fd5b50610534600480360381019061052f9190611d69565b610ff8565b6040516105419190611db8565b60405180910390f35b34801561055657600080fd5b50610571600480360381019061056c9190611ff9565b6110f3565b60405161057f9291906120c3565b60405180910390f35b34801561059457600080fd5b506105af60048036038101906105aa919061211f565b611104565b6040516105bc9190611db8565b60405180910390f35b3480156105d157600080fd5b506105ec60048036038101906105e79190611d69565b61111c565b6040516105f99190611db8565b60405180910390f35b34801561060e57600080fd5b506106296004803603810190610624919061214c565b611217565b6040516106369190611db8565b60405180910390f35b34801561064b57600080fd5b50610654611234565b005b34801561066257600080fd5b5061067d6004803603810190610678919061214c565b611275565b60405161068a9190611db8565b60405180910390f35b34801561069f57600080fd5b506106a861128d565b005b3480156106b657600080fd5b506106bf611321565b6040516106cc9190611db8565b60405180910390f35b3480156106e157600080fd5b506106ea61132a565b6040516106f89291906120c3565b60405180910390f35b34801561070d57600080fd5b5061071661136f565b005b34801561072457600080fd5b5061073f600480360381019061073a919061219d565b6113a6565b60405161074c919061237c565b60405180910390f35b34801561076157600080fd5b5061077c600480360381019061077791906123bd565b6113bf565b60405161078991906125ca565b60405180910390f35b34801561079e57600080fd5b506107b960048036038101906107b49190611ff9565b6113c8565b005b3480156107c757600080fd5b506107d06113cc565b6040516107de9291906120c3565b60405180910390f35b3480156107f357600080fd5b506107fc611411565b005b34801561080a57600080fd5b50610813611441565b005b34801561082157600080fd5b5061082a61144b565b005b34801561083857600080fd5b50610853600480360381019061084e919061260e565b611484565b604051610860919061270d565b60405180910390f35b34801561087557600080fd5b50610890600480360381019061088b9190612768565b61152f565b60405161089f939291906127ca565b60405180910390f35b3480156108b457600080fd5b506108cf60048036038101906108ca919061285c565b611546565b005b3480156108dd57600080fd5b506108e6611587565b005b3480156108f457600080fd5b506108fd6115d0565b60405161090a9190611db8565b60405180910390f35b34801561091f57600080fd5b50610928611617565b604051610935919061292f565b60405180910390f35b34801561094a57600080fd5b5061095361163d565b005b34801561096157600080fd5b5061097c60048036038101906109779190611ff9565b61168f565b60405161098a9291906120c3565b60405180910390f35b34801561099f57600080fd5b506109ba60048036038101906109b59190612a0d565b6116a0565b6040516109c79190612b14565b60405180910390f35b3480156109dc57600080fd5b506109f760048036038101906109f2919061214c565b6116aa565b604051610a049190611db8565b60405180910390f35b348015610a1957600080fd5b50610a346004803603810190610a2f919061214c565b6116bb565b604051610a419190611db8565b60405180910390f35b348015610a5657600080fd5b50610a716004803603810190610a6c919061211f565b611709565b604051610a7e9190612b36565b60405180910390f35b348015610a9357600080fd5b50610a9c611713565b604051610aa99190611e9c565b60405180910390f35b348015610abe57600080fd5b50610ad96004803603810190610ad4919061214c565b611726565b005b348015610ae757600080fd5b50610b026004803603810190610afd91906123bd565b611742565b604051610b0f919061237c565b60405180910390f35b348015610b2457600080fd5b50610b3f6004803603810190610b3a919061214c565b611877565b604051610b4c9190611db8565b60405180910390f35b6000610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d90612b9d565b60405180910390fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311abb00283836040518363ffffffff1660e01b8152600401610bf5929190612bbd565b600060405180830381600087803b158015610c0f57600080fd5b505af1158015610c23573d6000803e3d6000fd5b505050505050565b60606000825167ffffffffffffffff811115610c4a57610c49611ac7565b5b604051908082528060200260200182016040528015610c785781602001602082028036833780820191505090505b50905060005b8351811015610ce0576001848281518110610c9c57610c9b612be6565b5b6020026020010151610cae9190612c44565b828281518110610cc157610cc0612be6565b5b6020026020010181815250508080610cd890612c78565b915050610c7e565b5080915050919050565b565b3373ffffffffffffffffffffffffffffffffffffffff1660017f33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b560405160405180910390a3565b600081600260008581526020019081526020016000206000828254610d589190612cc0565b9250508190555081905092915050565b6000610d7757610d76612d04565b5b565b60005481565b600081600360146101000a81548160ff02191690836003811115610da657610da5611e25565b5b0217905550600360149054906101000a900460ff166003811115610dcd57610dcc611e25565b5b7fbea054406fdf249b05d1aef1b5f848d62d902d94389fca702b2d8337677c359a60405160405180910390a2819050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663047c4425836040518263ffffffff1660e01b8152600401610e5e9190611db8565b6020604051808303816000875af1158015610e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea19190612d48565b50827feace1be0b97ec11f959499c07b9f60f0cc47bf610b28fda8fb0e970339cf3b3560405160405180910390a28183610edb9190612cc0565b905092915050565b6000819050919050565b6000600282610efc9190612cc0565b9150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa8fca7a84846040518363ffffffff1660e01b8152600401610f5b929190612d75565b6020604051808303816000875af1158015610f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9e9190612d48565b503373ffffffffffffffffffffffffffffffffffffffff1660017f33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b560405160405180910390a38183610ff09190612cc0565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e41f13584846040518363ffffffff1660e01b8152600401611057929190612d75565b6020604051808303816000875af1158015611076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109a9190612d48565b503373ffffffffffffffffffffffffffffffffffffffff16827f33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b560405160405180910390a381836110eb9190612cc0565b905092915050565b600060608383915091509250929050565b60016020528060005260406000206000915090505481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e41f13584846040518363ffffffff1660e01b815260040161117b929190612d75565b6020604051808303816000875af115801561119a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111be9190612d48565b503373ffffffffffffffffffffffffffffffffffffffff16827f33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b560405160405180910390a3818361120f9190612cc0565b905092915050565b600060026000838152602001908152602001600020549050919050565b600c60156040517f4a2eaf7e00000000000000000000000000000000000000000000000000000000815260040161126c929190612e14565b60405180910390fd5b60026020528060005260406000206000915090505481565b7febe3ff7e2071d351bf2e65b4fccd24e3ae99485f02468f1feecf7d64dc04418860405180606001604052806040518060400160405280600481526020017f4a6f686e000000000000000000000000000000000000000000000000000000008152508152602001600567ffffffffffffffff168152602001600a8152506040516113179190612eb0565b60405180910390a1565b60008054905090565b60006060617a696040518060400160405280600a81526020017f6f757470757456616c3100000000000000000000000000000000000000000000815250915091509091565b7f25b7adba1b046a19379db4bc06aa1f2e71604d7b599a0ee8783d58110f00e16a60405161139c90612f1e565b60405180910390a1565b6113ae6118ae565b816113b8906130f9565b9050919050565b36819050919050565b5050565b60006060617a696040518060400160405280600a81526020017f6f757470757456616c3100000000000000000000000000000000000000000000815250915091509091565b60537feace1be0b97ec11f959499c07b9f60f0cc47bf610b28fda8fb0e970339cf3b3560405160405180910390a2565b611449611234565b565b7f33bc9bae48dbe1e057f264b3fc6a1dacdcceacb3ba28d937231c70e068a02f1c3360405161147a9190612b36565b60405180910390a1565b61148c6118ce565b6114946118ce565b826000600381106114a8576114a7612be6565b5b6020028101906114b8919061311b565b6114c190613143565b816000600281106114d5576114d4612be6565b5b6020020181905250826001600381106114f1576114f0612be6565b5b602002810190611501919061311b565b61150a90613143565b8160016002811061151e5761151d612be6565b5b602002018190525080915050919050565b600080600085858592509250925093509350939050565b606460656040517f4a2eaf7e00000000000000000000000000000000000000000000000000000000815260040161157e9291906131cc565b60405180910390fd5b60033373ffffffffffffffffffffffffffffffffffffffff1660017f5660e8f93f0146f45abcd659e026b75995db50053cbbca4d7f365934ade68bf360405160405180910390a4565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60033373ffffffffffffffffffffffffffffffffffffffff1660027f56c2ea44ba516098cee0c181dd9d8db262657368b6e911e83ae0ccfae806c73d60405161168590613241565b60405180910390a4565b600060608383915091509250929050565b6060819050919050565b600081600081905550819050919050565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550819050919050565b6000819050919050565b600360149054906101000a900460ff1681565b6000600260008381526020019081526020016000208190555050565b61174a6118ae565b600082806000019061175c9190613261565b60405160200161176d9291906132f4565b6040516020818303038152906040528051906020012090506000602067ffffffffffffffff8111156117a2576117a1611ac7565b5b6040519080825280601f01601f1916602001820160405280156117d45781602001600182028036833780820191505090505b50905060005b602081101561184f578281602081106117f6576117f5612be6565b5b1a60f81b82828151811061180d5761180c612be6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061184790612c78565b9150506117da565b5060405180604001604052808561186590613143565b81526020018281525092505050919050565b6000817fb16dba9242e1aa07ccc47228094628f72c8cc9699ee45d5bc8d67b84d3038c6860405160405180910390a2819050919050565b60405180604001604052806118c16118fb565b8152602001606081525090565b60405180604001604052806002905b6118e56118fb565b8152602001906001900390816118dd5790505090565b604051806040016040528060608152602001606081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061194082611915565b9050919050565b61195081611935565b82525050565b6000819050919050565b61196981611956565b82525050565b600082825260208201905092915050565b7f5265636569766564204574686572000000000000000000000000000000000000600082015250565b60006119b6600e8361196f565b91506119c182611980565b602082019050919050565b60006060820190506119e16000830185611947565b6119ee6020830184611960565b81810360408301526119ff816119a9565b90509392505050565b6000604082019050611a1d6000830185611947565b611a2a6020830184611960565b9392505050565b6000604051905090565b600080fd5b600080fd5b611a4e81611956565b8114611a5957600080fd5b50565b600081359050611a6b81611a45565b92915050565b60008060408385031215611a8857611a87611a3b565b5b6000611a9685828601611a5c565b9250506020611aa785828601611a5c565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611aff82611ab6565b810181811067ffffffffffffffff82111715611b1e57611b1d611ac7565b5b80604052505050565b6000611b31611a31565b9050611b3d8282611af6565b919050565b600067ffffffffffffffff821115611b5d57611b5c611ac7565b5b602082029050602081019050919050565b600080fd5b6000611b86611b8184611b42565b611b27565b90508083825260208201905060208402830185811115611ba957611ba8611b6e565b5b835b81811015611bd25780611bbe8882611a5c565b845260208401935050602081019050611bab565b5050509392505050565b600082601f830112611bf157611bf0611ab1565b5b8135611c01848260208601611b73565b91505092915050565b600060208284031215611c2057611c1f611a3b565b5b600082013567ffffffffffffffff811115611c3e57611c3d611a40565b5b611c4a84828501611bdc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c8881611956565b82525050565b6000611c9a8383611c7f565b60208301905092915050565b6000602082019050919050565b6000611cbe82611c53565b611cc88185611c5e565b9350611cd383611c6f565b8060005b83811015611d04578151611ceb8882611c8e565b9750611cf683611ca6565b925050600181019050611cd7565b5085935050505092915050565b60006020820190508181036000830152611d2b8184611cb3565b905092915050565b6000819050919050565b611d4681611d33565b8114611d5157600080fd5b50565b600081359050611d6381611d3d565b92915050565b60008060408385031215611d8057611d7f611a3b565b5b6000611d8e85828601611d54565b9250506020611d9f85828601611d54565b9150509250929050565b611db281611d33565b82525050565b6000602082019050611dcd6000830184611da9565b92915050565b60048110611de057600080fd5b50565b600081359050611df281611dd3565b92915050565b600060208284031215611e0e57611e0d611a3b565b5b6000611e1c84828501611de3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611e6557611e64611e25565b5b50565b6000819050611e7682611e54565b919050565b6000611e8682611e68565b9050919050565b611e9681611e7b565b82525050565b6000602082019050611eb16000830184611e8d565b92915050565b6000819050919050565b611eca81611eb7565b8114611ed557600080fd5b50565b600081359050611ee781611ec1565b92915050565b600060208284031215611f0357611f02611a3b565b5b6000611f1184828501611ed8565b91505092915050565b611f2381611eb7565b82525050565b6000602082019050611f3e6000830184611f1a565b92915050565b600080fd5b600067ffffffffffffffff821115611f6457611f63611ac7565b5b611f6d82611ab6565b9050602081019050919050565b82818337600083830152505050565b6000611f9c611f9784611f49565b611b27565b905082815260208101848484011115611fb857611fb7611f44565b5b611fc3848285611f7a565b509392505050565b600082601f830112611fe057611fdf611ab1565b5b8135611ff0848260208601611f89565b91505092915050565b600080604083850312156120105761200f611a3b565b5b600061201e85828601611a5c565b925050602083013567ffffffffffffffff81111561203f5761203e611a40565b5b61204b85828601611fcb565b9150509250929050565b600081519050919050565b60005b8381101561207e578082015181840152602081019050612063565b60008484015250505050565b600061209582612055565b61209f818561196f565b93506120af818560208601612060565b6120b881611ab6565b840191505092915050565b60006040820190506120d86000830185611960565b81810360208301526120ea818461208a565b90509392505050565b6120fc81611935565b811461210757600080fd5b50565b600081359050612119816120f3565b92915050565b60006020828403121561213557612134611a3b565b5b60006121438482850161210a565b91505092915050565b60006020828403121561216257612161611a3b565b5b600061217084828501611d54565b91505092915050565b600080fd5b60006040828403121561219457612193612179565b5b81905092915050565b6000602082840312156121b3576121b2611a3b565b5b600082013567ffffffffffffffff8111156121d1576121d0611a40565b5b6121dd8482850161217e565b91505092915050565b600082825260208201905092915050565b600061220282612055565b61220c81856121e6565b935061221c818560208601612060565b61222581611ab6565b840191505092915050565b600082825260208201905092915050565b600061224c82611c53565b6122568185612230565b935061226183611c6f565b8060005b838110156122925781516122798882611c8e565b975061228483611ca6565b925050600181019050612265565b5085935050505092915050565b600060408301600083015184820360008601526122bc82826121f7565b915050602083015184820360208601526122d68282612241565b9150508091505092915050565b600081519050919050565b600082825260208201905092915050565b600061230a826122e3565b61231481856122ee565b9350612324818560208601612060565b61232d81611ab6565b840191505092915050565b60006040830160008301518482036000860152612355828261229f565b9150506020830151848203602086015261236f82826122ff565b9150508091505092915050565b600060208201905081810360008301526123968184612338565b905092915050565b6000604082840312156123b4576123b3612179565b5b81905092915050565b6000602082840312156123d3576123d2611a3b565b5b600082013567ffffffffffffffff8111156123f1576123f0611a40565b5b6123fd8482850161239e565b91505092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261243257612431612410565b5b83810192508235915060208301925067ffffffffffffffff82111561245a57612459612406565b5b6001820236038313156124705761246f61240b565b5b509250929050565b600061248483856121e6565b9350612491838584611f7a565b61249a83611ab6565b840190509392505050565b600080833560016020038436030381126124c2576124c1612410565b5b83810192508235915060208301925067ffffffffffffffff8211156124ea576124e9612406565b5b602082023603831315612500576124ff61240b565b5b509250929050565b600080fd5b82818337505050565b60006125228385612230565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561255557612554612508565b5b60208302925061256683858461250d565b82840190509392505050565b6000604083016125856000840184612415565b8583036000870152612598838284612478565b925050506125a960208401846124a5565b85830360208701526125bc838284612516565b925050508091505092915050565b600060208201905081810360008301526125e48184612572565b905092915050565b60008190508260206003028201111561260857612607611b6e565b5b92915050565b60006020828403121561262457612623611a3b565b5b600082013567ffffffffffffffff81111561264257612641611a40565b5b61264e848285016125ec565b91505092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000612683838361229f565b905092915050565b6000602082019050919050565b60006126a382612657565b6126ad8185612662565b9350836020820285016126bf8561266d565b8060005b858110156126fb57848403895281516126dc8582612677565b94506126e78361268b565b925060208a019950506001810190506126c3565b50829750879550505050505092915050565b600060208201905081810360008301526127278184612698565b905092915050565b600081600f0b9050919050565b6127458161272f565b811461275057600080fd5b50565b6000813590506127628161273c565b92915050565b60008060006060848603121561278157612780611a3b565b5b600061278f86828701611d54565b93505060206127a086828701612753565b92505060406127b186828701611a5c565b9150509250925092565b6127c48161272f565b82525050565b60006060820190506127df6000830186611da9565b6127ec60208301856127bb565b6127f96040830184611960565b949350505050565b600080fd5b60008083601f84011261281c5761281b611ab1565b5b8235905067ffffffffffffffff81111561283957612838612801565b5b60208301915083600182028301111561285557612854611b6e565b5b9250929050565b6000806000806060858703121561287657612875611a3b565b5b60006128848782880161210a565b945050602061289587828801611a5c565b935050604085013567ffffffffffffffff8111156128b6576128b5611a40565b5b6128c287828801612806565b925092505092959194509250565b6000819050919050565b60006128f56128f06128eb84611915565b6128d0565b611915565b9050919050565b6000612907826128da565b9050919050565b6000612919826128fc565b9050919050565b6129298161290e565b82525050565b60006020820190506129446000830184612920565b92915050565b600067ffffffffffffffff82111561296557612964611ac7565b5b602082029050602081019050919050565b60006129896129848461294a565b611b27565b905080838252602082019050602084028301858111156129ac576129ab611b6e565b5b835b818110156129d557806129c1888261210a565b8452602084019350506020810190506129ae565b5050509392505050565b600082601f8301126129f4576129f3611ab1565b5b8135612a04848260208601612976565b91505092915050565b600060208284031215612a2357612a22611a3b565b5b600082013567ffffffffffffffff811115612a4157612a40611a40565b5b612a4d848285016129df565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a8b81611935565b82525050565b6000612a9d8383612a82565b60208301905092915050565b6000602082019050919050565b6000612ac182612a56565b612acb8185612a61565b9350612ad683612a72565b8060005b83811015612b07578151612aee8882612a91565b9750612af983612aa9565b925050600181019050612ada565b5085935050505092915050565b60006020820190508181036000830152612b2e8184612ab6565b905092915050565b6000602082019050612b4b6000830184611947565b92915050565b7f616c7761797320726576657274206572726f7200000000000000000000000000600082015250565b6000612b8760138361196f565b9150612b9282612b51565b602082019050919050565b60006020820190508181036000830152612bb681612b7a565b9050919050565b6000604082019050612bd26000830185611960565b612bdf6020830184611960565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c4f82611956565b9150612c5a83611956565b9250828201905080821115612c7257612c71612c15565b5b92915050565b6000612c8382611956565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612cb557612cb4612c15565b5b600182019050919050565b6000612ccb82611d33565b9150612cd683611d33565b925082820190508281121560008312168382126000841215161715612cfe57612cfd612c15565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081519050612d4281611d3d565b92915050565b600060208284031215612d5e57612d5d611a3b565b5b6000612d6c84828501612d33565b91505092915050565b6000604082019050612d8a6000830185611da9565b612d976020830184611da9565b9392505050565b6000819050919050565b6000612dc3612dbe612db984612d9e565b6128d0565b611956565b9050919050565b612dd381612da8565b82525050565b6000819050919050565b6000612dfe612df9612df484612dd9565b6128d0565b611956565b9050919050565b612e0e81612de3565b82525050565b6000604082019050612e296000830185612dca565b612e366020830184612e05565b9392505050565b600067ffffffffffffffff82169050919050565b612e5a81612e3d565b82525050565b60006060830160008301518482036000860152612e7d82826121f7565b9150506020830151612e926020860182612e51565b506040830151612ea56040860182611c7f565b508091505092915050565b60006020820190508181036000830152612eca8184612e60565b905092915050565b7f6d79537472696e67000000000000000000000000000000000000000000000000600082015250565b6000612f0860088361196f565b9150612f1382612ed2565b602082019050919050565b60006020820190508181036000830152612f3781612efb565b9050919050565b600080fd5b600080fd5b600060408284031215612f5e57612f5d612f3e565b5b612f686040611b27565b9050600082013567ffffffffffffffff811115612f8857612f87612f43565b5b612f9484828501611fcb565b600083015250602082013567ffffffffffffffff811115612fb857612fb7612f43565b5b612fc484828501611bdc565b60208301525092915050565b600067ffffffffffffffff821115612feb57612fea611ac7565b5b612ff482611ab6565b9050602081019050919050565b600061301461300f84612fd0565b611b27565b9050828152602081018484840111156130305761302f611f44565b5b61303b848285611f7a565b509392505050565b600082601f83011261305857613057611ab1565b5b8135613068848260208601613001565b91505092915050565b60006040828403121561308757613086612f3e565b5b6130916040611b27565b9050600082013567ffffffffffffffff8111156130b1576130b0612f43565b5b6130bd84828501612f48565b600083015250602082013567ffffffffffffffff8111156130e1576130e0612f43565b5b6130ed84828501613043565b60208301525092915050565b60006131053683613071565b9050919050565b600080fd5b600080fd5b600080fd5b6000823560016040038336030381126131375761313661310c565b5b80830191505092915050565b600061314f3683612f48565b9050919050565b6000819050919050565b600061317b61317661317184613156565b6128d0565b611956565b9050919050565b61318b81613160565b82525050565b6000819050919050565b60006131b66131b16131ac84613191565b6128d0565b611956565b9050919050565b6131c68161319b565b82525050565b60006040820190506131e16000830185613182565b6131ee60208301846131bd565b9392505050565b7f736f6d6520696400000000000000000000000000000000000000000000000000600082015250565b600061322b60078361196f565b9150613236826131f5565b602082019050919050565b6000602082019050818103600083015261325a8161321e565b9050919050565b6000808335600160200384360303811261327e5761327d61310c565b5b80840192508235915067ffffffffffffffff8211156132a05761329f613111565b5b6020830192506001820236038313156132bc576132bb613116565b5b509250929050565b600081905092915050565b60006132db83856132c4565b93506132e8838584611f7a565b82840190509392505050565b60006133018284866132cf565b9150819050939250505056fea26469706673582212201e13a4a539d3a7d5f587f12acf838cf31f23a6457bd6caa908232bef6f83846664736f6c63430008130033",
}

// NetworkDebugContractABI is the input ABI used to generate the binding from.
// Deprecated: Use NetworkDebugContractMetaData.ABI instead.
var NetworkDebugContractABI = NetworkDebugContractMetaData.ABI

// NetworkDebugContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NetworkDebugContractMetaData.Bin instead.
var NetworkDebugContractBin = NetworkDebugContractMetaData.Bin

// DeployNetworkDebugContract deploys a new Ethereum contract, binding an instance of NetworkDebugContract to it.
func DeployNetworkDebugContract(auth *bind.TransactOpts, backend bind.ContractBackend, subAddr common.Address) (common.Address, *types.Transaction, *NetworkDebugContract, error) {
	parsed, err := NetworkDebugContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NetworkDebugContractBin), backend, subAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NetworkDebugContract{NetworkDebugContractCaller: NetworkDebugContractCaller{contract: contract}, NetworkDebugContractTransactor: NetworkDebugContractTransactor{contract: contract}, NetworkDebugContractFilterer: NetworkDebugContractFilterer{contract: contract}}, nil
}

// NetworkDebugContract is an auto generated Go binding around an Ethereum contract.
type NetworkDebugContract struct {
	NetworkDebugContractCaller     // Read-only binding to the contract
	NetworkDebugContractTransactor // Write-only binding to the contract
	NetworkDebugContractFilterer   // Log filterer for contract events
}

// NetworkDebugContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type NetworkDebugContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NetworkDebugContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NetworkDebugContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NetworkDebugContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NetworkDebugContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NetworkDebugContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NetworkDebugContractSession struct {
	Contract     *NetworkDebugContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// NetworkDebugContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NetworkDebugContractCallerSession struct {
	Contract *NetworkDebugContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// NetworkDebugContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NetworkDebugContractTransactorSession struct {
	Contract     *NetworkDebugContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// NetworkDebugContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type NetworkDebugContractRaw struct {
	Contract *NetworkDebugContract // Generic contract binding to access the raw methods on
}

// NetworkDebugContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NetworkDebugContractCallerRaw struct {
	Contract *NetworkDebugContractCaller // Generic read-only contract binding to access the raw methods on
}

// NetworkDebugContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NetworkDebugContractTransactorRaw struct {
	Contract *NetworkDebugContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNetworkDebugContract creates a new instance of NetworkDebugContract, bound to a specific deployed contract.
func NewNetworkDebugContract(address common.Address, backend bind.ContractBackend) (*NetworkDebugContract, error) {
	contract, err := bindNetworkDebugContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContract{NetworkDebugContractCaller: NetworkDebugContractCaller{contract: contract}, NetworkDebugContractTransactor: NetworkDebugContractTransactor{contract: contract}, NetworkDebugContractFilterer: NetworkDebugContractFilterer{contract: contract}}, nil
}

// NewNetworkDebugContractCaller creates a new read-only instance of NetworkDebugContract, bound to a specific deployed contract.
func NewNetworkDebugContractCaller(address common.Address, caller bind.ContractCaller) (*NetworkDebugContractCaller, error) {
	contract, err := bindNetworkDebugContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractCaller{contract: contract}, nil
}

// NewNetworkDebugContractTransactor creates a new write-only instance of NetworkDebugContract, bound to a specific deployed contract.
func NewNetworkDebugContractTransactor(address common.Address, transactor bind.ContractTransactor) (*NetworkDebugContractTransactor, error) {
	contract, err := bindNetworkDebugContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractTransactor{contract: contract}, nil
}

// NewNetworkDebugContractFilterer creates a new log filterer instance of NetworkDebugContract, bound to a specific deployed contract.
func NewNetworkDebugContractFilterer(address common.Address, filterer bind.ContractFilterer) (*NetworkDebugContractFilterer, error) {
	contract, err := bindNetworkDebugContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractFilterer{contract: contract}, nil
}

// bindNetworkDebugContract binds a generic wrapper to an already deployed contract.
func bindNetworkDebugContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NetworkDebugContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NetworkDebugContract *NetworkDebugContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NetworkDebugContract.Contract.NetworkDebugContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NetworkDebugContract *NetworkDebugContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.NetworkDebugContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NetworkDebugContract *NetworkDebugContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.NetworkDebugContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NetworkDebugContract *NetworkDebugContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NetworkDebugContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NetworkDebugContract *NetworkDebugContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NetworkDebugContract *NetworkDebugContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.contract.Transact(opts, method, params...)
}

// CounterMap is a free data retrieval call binding the contract method 0x6284117d.
//
// Solidity: function counterMap(int256 ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCaller) CounterMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "counterMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CounterMap is a free data retrieval call binding the contract method 0x6284117d.
//
// Solidity: function counterMap(int256 ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) CounterMap(arg0 *big.Int) (*big.Int, error) {
	return _NetworkDebugContract.Contract.CounterMap(&_NetworkDebugContract.CallOpts, arg0)
}

// CounterMap is a free data retrieval call binding the contract method 0x6284117d.
//
// Solidity: function counterMap(int256 ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) CounterMap(arg0 *big.Int) (*big.Int, error) {
	return _NetworkDebugContract.Contract.CounterMap(&_NetworkDebugContract.CallOpts, arg0)
}

// CurrentStatus is a free data retrieval call binding the contract method 0xef8a9235.
//
// Solidity: function currentStatus() view returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractCaller) CurrentStatus(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "currentStatus")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CurrentStatus is a free data retrieval call binding the contract method 0xef8a9235.
//
// Solidity: function currentStatus() view returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractSession) CurrentStatus() (uint8, error) {
	return _NetworkDebugContract.Contract.CurrentStatus(&_NetworkDebugContract.CallOpts)
}

// CurrentStatus is a free data retrieval call binding the contract method 0xef8a9235.
//
// Solidity: function currentStatus() view returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) CurrentStatus() (uint8, error) {
	return _NetworkDebugContract.Contract.CurrentStatus(&_NetworkDebugContract.CallOpts)
}

// Get is a free data retrieval call binding the contract method 0x6d4ce63c.
//
// Solidity: function get() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCaller) Get(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "get")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Get is a free data retrieval call binding the contract method 0x6d4ce63c.
//
// Solidity: function get() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractSession) Get() (*big.Int, error) {
	return _NetworkDebugContract.Contract.Get(&_NetworkDebugContract.CallOpts)
}

// Get is a free data retrieval call binding the contract method 0x6d4ce63c.
//
// Solidity: function get() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) Get() (*big.Int, error) {
	return _NetworkDebugContract.Contract.Get(&_NetworkDebugContract.CallOpts)
}

// GetCounter is a free data retrieval call binding the contract method 0x5921483f.
//
// Solidity: function getCounter(int256 idx) view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCaller) GetCounter(opts *bind.CallOpts, idx *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "getCounter", idx)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCounter is a free data retrieval call binding the contract method 0x5921483f.
//
// Solidity: function getCounter(int256 idx) view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractSession) GetCounter(idx *big.Int) (*big.Int, error) {
	return _NetworkDebugContract.Contract.GetCounter(&_NetworkDebugContract.CallOpts, idx)
}

// GetCounter is a free data retrieval call binding the contract method 0x5921483f.
//
// Solidity: function getCounter(int256 idx) view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) GetCounter(idx *big.Int) (*big.Int, error) {
	return _NetworkDebugContract.Contract.GetCounter(&_NetworkDebugContract.CallOpts, idx)
}

// GetMap is a free data retrieval call binding the contract method 0xad3de14c.
//
// Solidity: function getMap() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCaller) GetMap(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "getMap")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMap is a free data retrieval call binding the contract method 0xad3de14c.
//
// Solidity: function getMap() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractSession) GetMap() (*big.Int, error) {
	return _NetworkDebugContract.Contract.GetMap(&_NetworkDebugContract.CallOpts)
}

// GetMap is a free data retrieval call binding the contract method 0xad3de14c.
//
// Solidity: function getMap() view returns(int256 data)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) GetMap() (*big.Int, error) {
	return _NetworkDebugContract.Contract.GetMap(&_NetworkDebugContract.CallOpts)
}

// StoredData is a free data retrieval call binding the contract method 0x2a1afcd9.
//
// Solidity: function storedData() view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCaller) StoredData(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "storedData")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StoredData is a free data retrieval call binding the contract method 0x2a1afcd9.
//
// Solidity: function storedData() view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) StoredData() (*big.Int, error) {
	return _NetworkDebugContract.Contract.StoredData(&_NetworkDebugContract.CallOpts)
}

// StoredData is a free data retrieval call binding the contract method 0x2a1afcd9.
//
// Solidity: function storedData() view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) StoredData() (*big.Int, error) {
	return _NetworkDebugContract.Contract.StoredData(&_NetworkDebugContract.CallOpts)
}

// StoredDataMap is a free data retrieval call binding the contract method 0x48ad9fe8.
//
// Solidity: function storedDataMap(address ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCaller) StoredDataMap(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "storedDataMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StoredDataMap is a free data retrieval call binding the contract method 0x48ad9fe8.
//
// Solidity: function storedDataMap(address ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) StoredDataMap(arg0 common.Address) (*big.Int, error) {
	return _NetworkDebugContract.Contract.StoredDataMap(&_NetworkDebugContract.CallOpts, arg0)
}

// StoredDataMap is a free data retrieval call binding the contract method 0x48ad9fe8.
//
// Solidity: function storedDataMap(address ) view returns(int256)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) StoredDataMap(arg0 common.Address) (*big.Int, error) {
	return _NetworkDebugContract.Contract.StoredDataMap(&_NetworkDebugContract.CallOpts, arg0)
}

// SubContract is a free data retrieval call binding the contract method 0xc0d06d89.
//
// Solidity: function subContract() view returns(address)
func (_NetworkDebugContract *NetworkDebugContractCaller) SubContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NetworkDebugContract.contract.Call(opts, &out, "subContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SubContract is a free data retrieval call binding the contract method 0xc0d06d89.
//
// Solidity: function subContract() view returns(address)
func (_NetworkDebugContract *NetworkDebugContractSession) SubContract() (common.Address, error) {
	return _NetworkDebugContract.Contract.SubContract(&_NetworkDebugContract.CallOpts)
}

// SubContract is a free data retrieval call binding the contract method 0xc0d06d89.
//
// Solidity: function subContract() view returns(address)
func (_NetworkDebugContract *NetworkDebugContractCallerSession) SubContract() (common.Address, error) {
	return _NetworkDebugContract.Contract.SubContract(&_NetworkDebugContract.CallOpts)
}

// AddCounter is a paid mutator transaction binding the contract method 0x23515760.
//
// Solidity: function addCounter(int256 idx, int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactor) AddCounter(opts *bind.TransactOpts, idx *big.Int, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "addCounter", idx, x)
}

// AddCounter is a paid mutator transaction binding the contract method 0x23515760.
//
// Solidity: function addCounter(int256 idx, int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractSession) AddCounter(idx *big.Int, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AddCounter(&_NetworkDebugContract.TransactOpts, idx, x)
}

// AddCounter is a paid mutator transaction binding the contract method 0x23515760.
//
// Solidity: function addCounter(int256 idx, int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) AddCounter(idx *big.Int, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AddCounter(&_NetworkDebugContract.TransactOpts, idx, x)
}

// AlwaysRevertsAssert is a paid mutator transaction binding the contract method 0x256560d5.
//
// Solidity: function alwaysRevertsAssert() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) AlwaysRevertsAssert(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "alwaysRevertsAssert")
}

// AlwaysRevertsAssert is a paid mutator transaction binding the contract method 0x256560d5.
//
// Solidity: function alwaysRevertsAssert() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) AlwaysRevertsAssert() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsAssert(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsAssert is a paid mutator transaction binding the contract method 0x256560d5.
//
// Solidity: function alwaysRevertsAssert() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) AlwaysRevertsAssert() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsAssert(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsCustomError is a paid mutator transaction binding the contract method 0x5e9c80d6.
//
// Solidity: function alwaysRevertsCustomError() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) AlwaysRevertsCustomError(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "alwaysRevertsCustomError")
}

// AlwaysRevertsCustomError is a paid mutator transaction binding the contract method 0x5e9c80d6.
//
// Solidity: function alwaysRevertsCustomError() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) AlwaysRevertsCustomError() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsCustomError(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsCustomError is a paid mutator transaction binding the contract method 0x5e9c80d6.
//
// Solidity: function alwaysRevertsCustomError() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) AlwaysRevertsCustomError() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsCustomError(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsRequire is a paid mutator transaction binding the contract method 0x06595f75.
//
// Solidity: function alwaysRevertsRequire() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) AlwaysRevertsRequire(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "alwaysRevertsRequire")
}

// AlwaysRevertsRequire is a paid mutator transaction binding the contract method 0x06595f75.
//
// Solidity: function alwaysRevertsRequire() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) AlwaysRevertsRequire() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsRequire(&_NetworkDebugContract.TransactOpts)
}

// AlwaysRevertsRequire is a paid mutator transaction binding the contract method 0x06595f75.
//
// Solidity: function alwaysRevertsRequire() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) AlwaysRevertsRequire() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.AlwaysRevertsRequire(&_NetworkDebugContract.TransactOpts)
}

// CallRevertFunctionInSubContract is a paid mutator transaction binding the contract method 0x11b3c478.
//
// Solidity: function callRevertFunctionInSubContract(uint256 x, uint256 y) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) CallRevertFunctionInSubContract(opts *bind.TransactOpts, x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "callRevertFunctionInSubContract", x, y)
}

// CallRevertFunctionInSubContract is a paid mutator transaction binding the contract method 0x11b3c478.
//
// Solidity: function callRevertFunctionInSubContract(uint256 x, uint256 y) returns()
func (_NetworkDebugContract *NetworkDebugContractSession) CallRevertFunctionInSubContract(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallRevertFunctionInSubContract(&_NetworkDebugContract.TransactOpts, x, y)
}

// CallRevertFunctionInSubContract is a paid mutator transaction binding the contract method 0x11b3c478.
//
// Solidity: function callRevertFunctionInSubContract(uint256 x, uint256 y) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) CallRevertFunctionInSubContract(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallRevertFunctionInSubContract(&_NetworkDebugContract.TransactOpts, x, y)
}

// CallRevertFunctionInTheContract is a paid mutator transaction binding the contract method 0x9349d00b.
//
// Solidity: function callRevertFunctionInTheContract() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) CallRevertFunctionInTheContract(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "callRevertFunctionInTheContract")
}

// CallRevertFunctionInTheContract is a paid mutator transaction binding the contract method 0x9349d00b.
//
// Solidity: function callRevertFunctionInTheContract() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) CallRevertFunctionInTheContract() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallRevertFunctionInTheContract(&_NetworkDebugContract.TransactOpts)
}

// CallRevertFunctionInTheContract is a paid mutator transaction binding the contract method 0x9349d00b.
//
// Solidity: function callRevertFunctionInTheContract() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) CallRevertFunctionInTheContract() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallRevertFunctionInTheContract(&_NetworkDebugContract.TransactOpts)
}

// CallbackMethod is a paid mutator transaction binding the contract method 0xfbcb8d07.
//
// Solidity: function callbackMethod(int256 x) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactor) CallbackMethod(opts *bind.TransactOpts, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "callbackMethod", x)
}

// CallbackMethod is a paid mutator transaction binding the contract method 0xfbcb8d07.
//
// Solidity: function callbackMethod(int256 x) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) CallbackMethod(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallbackMethod(&_NetworkDebugContract.TransactOpts, x)
}

// CallbackMethod is a paid mutator transaction binding the contract method 0xfbcb8d07.
//
// Solidity: function callbackMethod(int256 x) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) CallbackMethod(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.CallbackMethod(&_NetworkDebugContract.TransactOpts, x)
}

// EmitAddress is a paid mutator transaction binding the contract method 0xec5c3ede.
//
// Solidity: function emitAddress(address addr) returns(address)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitAddress(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitAddress", addr)
}

// EmitAddress is a paid mutator transaction binding the contract method 0xec5c3ede.
//
// Solidity: function emitAddress(address addr) returns(address)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitAddress(addr common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitAddress(&_NetworkDebugContract.TransactOpts, addr)
}

// EmitAddress is a paid mutator transaction binding the contract method 0xec5c3ede.
//
// Solidity: function emitAddress(address addr) returns(address)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitAddress(addr common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitAddress(&_NetworkDebugContract.TransactOpts, addr)
}

// EmitBytes32 is a paid mutator transaction binding the contract method 0x33311ef3.
//
// Solidity: function emitBytes32(bytes32 input) returns(bytes32 output)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitBytes32(opts *bind.TransactOpts, input [32]byte) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitBytes32", input)
}

// EmitBytes32 is a paid mutator transaction binding the contract method 0x33311ef3.
//
// Solidity: function emitBytes32(bytes32 input) returns(bytes32 output)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitBytes32(input [32]byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitBytes32(&_NetworkDebugContract.TransactOpts, input)
}

// EmitBytes32 is a paid mutator transaction binding the contract method 0x33311ef3.
//
// Solidity: function emitBytes32(bytes32 input) returns(bytes32 output)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitBytes32(input [32]byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitBytes32(&_NetworkDebugContract.TransactOpts, input)
}

// EmitFourParamMixedEvent is a paid mutator transaction binding the contract method 0xc2124b22.
//
// Solidity: function emitFourParamMixedEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitFourParamMixedEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitFourParamMixedEvent")
}

// EmitFourParamMixedEvent is a paid mutator transaction binding the contract method 0xc2124b22.
//
// Solidity: function emitFourParamMixedEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitFourParamMixedEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitFourParamMixedEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitFourParamMixedEvent is a paid mutator transaction binding the contract method 0xc2124b22.
//
// Solidity: function emitFourParamMixedEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitFourParamMixedEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitFourParamMixedEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitInputs is a paid mutator transaction binding the contract method 0x81b375a0.
//
// Solidity: function emitInputs(uint256 inputVal1, string inputVal2) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitInputs(opts *bind.TransactOpts, inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitInputs", inputVal1, inputVal2)
}

// EmitInputs is a paid mutator transaction binding the contract method 0x81b375a0.
//
// Solidity: function emitInputs(uint256 inputVal1, string inputVal2) returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitInputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitInputs is a paid mutator transaction binding the contract method 0x81b375a0.
//
// Solidity: function emitInputs(uint256 inputVal1, string inputVal2) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitInputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitInputsOutputs is a paid mutator transaction binding the contract method 0xd7a80205.
//
// Solidity: function emitInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitInputsOutputs(opts *bind.TransactOpts, inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitInputsOutputs", inputVal1, inputVal2)
}

// EmitInputsOutputs is a paid mutator transaction binding the contract method 0xd7a80205.
//
// Solidity: function emitInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitInputsOutputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInputsOutputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitInputsOutputs is a paid mutator transaction binding the contract method 0xd7a80205.
//
// Solidity: function emitInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitInputsOutputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInputsOutputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitInts is a paid mutator transaction binding the contract method 0x9e099652.
//
// Solidity: function emitInts(int256 first, int128 second, uint256 third) returns(int256, int128 outputVal1, uint256 outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitInts(opts *bind.TransactOpts, first *big.Int, second *big.Int, third *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitInts", first, second, third)
}

// EmitInts is a paid mutator transaction binding the contract method 0x9e099652.
//
// Solidity: function emitInts(int256 first, int128 second, uint256 third) returns(int256, int128 outputVal1, uint256 outputVal2)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitInts(first *big.Int, second *big.Int, third *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInts(&_NetworkDebugContract.TransactOpts, first, second, third)
}

// EmitInts is a paid mutator transaction binding the contract method 0x9e099652.
//
// Solidity: function emitInts(int256 first, int128 second, uint256 third) returns(int256, int128 outputVal1, uint256 outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitInts(first *big.Int, second *big.Int, third *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitInts(&_NetworkDebugContract.TransactOpts, first, second, third)
}

// EmitNamedInputsOutputs is a paid mutator transaction binding the contract method 0x45f0c9e6.
//
// Solidity: function emitNamedInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitNamedInputsOutputs(opts *bind.TransactOpts, inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitNamedInputsOutputs", inputVal1, inputVal2)
}

// EmitNamedInputsOutputs is a paid mutator transaction binding the contract method 0x45f0c9e6.
//
// Solidity: function emitNamedInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitNamedInputsOutputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNamedInputsOutputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitNamedInputsOutputs is a paid mutator transaction binding the contract method 0x45f0c9e6.
//
// Solidity: function emitNamedInputsOutputs(uint256 inputVal1, string inputVal2) returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitNamedInputsOutputs(inputVal1 *big.Int, inputVal2 string) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNamedInputsOutputs(&_NetworkDebugContract.TransactOpts, inputVal1, inputVal2)
}

// EmitNamedOutputs is a paid mutator transaction binding the contract method 0x7014c81d.
//
// Solidity: function emitNamedOutputs() returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitNamedOutputs(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitNamedOutputs")
}

// EmitNamedOutputs is a paid mutator transaction binding the contract method 0x7014c81d.
//
// Solidity: function emitNamedOutputs() returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitNamedOutputs() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNamedOutputs(&_NetworkDebugContract.TransactOpts)
}

// EmitNamedOutputs is a paid mutator transaction binding the contract method 0x7014c81d.
//
// Solidity: function emitNamedOutputs() returns(uint256 outputVal1, string outputVal2)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitNamedOutputs() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNamedOutputs(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexEvent is a paid mutator transaction binding the contract method 0x95a81a4c.
//
// Solidity: function emitNoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitNoIndexEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitNoIndexEvent")
}

// EmitNoIndexEvent is a paid mutator transaction binding the contract method 0x95a81a4c.
//
// Solidity: function emitNoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitNoIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexEvent is a paid mutator transaction binding the contract method 0x95a81a4c.
//
// Solidity: function emitNoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitNoIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexEventString is a paid mutator transaction binding the contract method 0x788c4772.
//
// Solidity: function emitNoIndexEventString() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitNoIndexEventString(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitNoIndexEventString")
}

// EmitNoIndexEventString is a paid mutator transaction binding the contract method 0x788c4772.
//
// Solidity: function emitNoIndexEventString() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitNoIndexEventString() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexEventString(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexEventString is a paid mutator transaction binding the contract method 0x788c4772.
//
// Solidity: function emitNoIndexEventString() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitNoIndexEventString() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexEventString(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexStructEvent is a paid mutator transaction binding the contract method 0x62c270e1.
//
// Solidity: function emitNoIndexStructEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitNoIndexStructEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitNoIndexStructEvent")
}

// EmitNoIndexStructEvent is a paid mutator transaction binding the contract method 0x62c270e1.
//
// Solidity: function emitNoIndexStructEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitNoIndexStructEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexStructEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitNoIndexStructEvent is a paid mutator transaction binding the contract method 0x62c270e1.
//
// Solidity: function emitNoIndexStructEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitNoIndexStructEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitNoIndexStructEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitOneIndexEvent is a paid mutator transaction binding the contract method 0x8f856296.
//
// Solidity: function emitOneIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitOneIndexEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitOneIndexEvent")
}

// EmitOneIndexEvent is a paid mutator transaction binding the contract method 0x8f856296.
//
// Solidity: function emitOneIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitOneIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitOneIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitOneIndexEvent is a paid mutator transaction binding the contract method 0x8f856296.
//
// Solidity: function emitOneIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitOneIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitOneIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitOutputs is a paid mutator transaction binding the contract method 0x8db611be.
//
// Solidity: function emitOutputs() returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitOutputs(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitOutputs")
}

// EmitOutputs is a paid mutator transaction binding the contract method 0x8db611be.
//
// Solidity: function emitOutputs() returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractSession) EmitOutputs() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitOutputs(&_NetworkDebugContract.TransactOpts)
}

// EmitOutputs is a paid mutator transaction binding the contract method 0x8db611be.
//
// Solidity: function emitOutputs() returns(uint256, string)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitOutputs() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitOutputs(&_NetworkDebugContract.TransactOpts)
}

// EmitThreeIndexEvent is a paid mutator transaction binding the contract method 0xaa3fdcf4.
//
// Solidity: function emitThreeIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitThreeIndexEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitThreeIndexEvent")
}

// EmitThreeIndexEvent is a paid mutator transaction binding the contract method 0xaa3fdcf4.
//
// Solidity: function emitThreeIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitThreeIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitThreeIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitThreeIndexEvent is a paid mutator transaction binding the contract method 0xaa3fdcf4.
//
// Solidity: function emitThreeIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitThreeIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitThreeIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitTwoIndexEvent is a paid mutator transaction binding the contract method 0x1e31d0a8.
//
// Solidity: function emitTwoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) EmitTwoIndexEvent(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "emitTwoIndexEvent")
}

// EmitTwoIndexEvent is a paid mutator transaction binding the contract method 0x1e31d0a8.
//
// Solidity: function emitTwoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractSession) EmitTwoIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitTwoIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// EmitTwoIndexEvent is a paid mutator transaction binding the contract method 0x1e31d0a8.
//
// Solidity: function emitTwoIndexEvent() returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) EmitTwoIndexEvent() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.EmitTwoIndexEvent(&_NetworkDebugContract.TransactOpts)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address sender, uint256 amount, bytes data) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) OnTokenTransfer(opts *bind.TransactOpts, sender common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "onTokenTransfer", sender, amount, data)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address sender, uint256 amount, bytes data) returns()
func (_NetworkDebugContract *NetworkDebugContractSession) OnTokenTransfer(sender common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.OnTokenTransfer(&_NetworkDebugContract.TransactOpts, sender, amount, data)
}

// OnTokenTransfer is a paid mutator transaction binding the contract method 0xa4c0ed36.
//
// Solidity: function onTokenTransfer(address sender, uint256 amount, bytes data) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) OnTokenTransfer(sender common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.OnTokenTransfer(&_NetworkDebugContract.TransactOpts, sender, amount, data)
}

// Pay is a paid mutator transaction binding the contract method 0x1b9265b8.
//
// Solidity: function pay() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) Pay(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "pay")
}

// Pay is a paid mutator transaction binding the contract method 0x1b9265b8.
//
// Solidity: function pay() payable returns()
func (_NetworkDebugContract *NetworkDebugContractSession) Pay() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Pay(&_NetworkDebugContract.TransactOpts)
}

// Pay is a paid mutator transaction binding the contract method 0x1b9265b8.
//
// Solidity: function pay() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) Pay() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Pay(&_NetworkDebugContract.TransactOpts)
}

// ProcessAddressArray is a paid mutator transaction binding the contract method 0xe1111f79.
//
// Solidity: function processAddressArray(address[] input) returns(address[])
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessAddressArray(opts *bind.TransactOpts, input []common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processAddressArray", input)
}

// ProcessAddressArray is a paid mutator transaction binding the contract method 0xe1111f79.
//
// Solidity: function processAddressArray(address[] input) returns(address[])
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessAddressArray(input []common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessAddressArray(&_NetworkDebugContract.TransactOpts, input)
}

// ProcessAddressArray is a paid mutator transaction binding the contract method 0xe1111f79.
//
// Solidity: function processAddressArray(address[] input) returns(address[])
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessAddressArray(input []common.Address) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessAddressArray(&_NetworkDebugContract.TransactOpts, input)
}

// ProcessDynamicData is a paid mutator transaction binding the contract method 0x7fdc8fe1.
//
// Solidity: function processDynamicData((string,uint256[]) data) returns((string,uint256[]))
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessDynamicData(opts *bind.TransactOpts, data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processDynamicData", data)
}

// ProcessDynamicData is a paid mutator transaction binding the contract method 0x7fdc8fe1.
//
// Solidity: function processDynamicData((string,uint256[]) data) returns((string,uint256[]))
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessDynamicData(data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessDynamicData(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessDynamicData is a paid mutator transaction binding the contract method 0x7fdc8fe1.
//
// Solidity: function processDynamicData((string,uint256[]) data) returns((string,uint256[]))
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessDynamicData(data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessDynamicData(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessFixedDataArray is a paid mutator transaction binding the contract method 0x99adad2e.
//
// Solidity: function processFixedDataArray((string,uint256[])[3] data) returns((string,uint256[])[2])
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessFixedDataArray(opts *bind.TransactOpts, data [3]NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processFixedDataArray", data)
}

// ProcessFixedDataArray is a paid mutator transaction binding the contract method 0x99adad2e.
//
// Solidity: function processFixedDataArray((string,uint256[])[3] data) returns((string,uint256[])[2])
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessFixedDataArray(data [3]NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessFixedDataArray(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessFixedDataArray is a paid mutator transaction binding the contract method 0x99adad2e.
//
// Solidity: function processFixedDataArray((string,uint256[])[3] data) returns((string,uint256[])[2])
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessFixedDataArray(data [3]NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessFixedDataArray(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessNestedData is a paid mutator transaction binding the contract method 0x7f12881c.
//
// Solidity: function processNestedData(((string,uint256[]),bytes) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessNestedData(opts *bind.TransactOpts, data NetworkDebugContractNestedData) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processNestedData", data)
}

// ProcessNestedData is a paid mutator transaction binding the contract method 0x7f12881c.
//
// Solidity: function processNestedData(((string,uint256[]),bytes) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessNestedData(data NetworkDebugContractNestedData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessNestedData(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessNestedData is a paid mutator transaction binding the contract method 0x7f12881c.
//
// Solidity: function processNestedData(((string,uint256[]),bytes) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessNestedData(data NetworkDebugContractNestedData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessNestedData(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessNestedData0 is a paid mutator transaction binding the contract method 0xf499af2a.
//
// Solidity: function processNestedData((string,uint256[]) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessNestedData0(opts *bind.TransactOpts, data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processNestedData0", data)
}

// ProcessNestedData0 is a paid mutator transaction binding the contract method 0xf499af2a.
//
// Solidity: function processNestedData((string,uint256[]) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessNestedData0(data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessNestedData0(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessNestedData0 is a paid mutator transaction binding the contract method 0xf499af2a.
//
// Solidity: function processNestedData((string,uint256[]) data) returns(((string,uint256[]),bytes))
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessNestedData0(data NetworkDebugContractData) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessNestedData0(&_NetworkDebugContract.TransactOpts, data)
}

// ProcessUintArray is a paid mutator transaction binding the contract method 0x12d91233.
//
// Solidity: function processUintArray(uint256[] input) returns(uint256[])
func (_NetworkDebugContract *NetworkDebugContractTransactor) ProcessUintArray(opts *bind.TransactOpts, input []*big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "processUintArray", input)
}

// ProcessUintArray is a paid mutator transaction binding the contract method 0x12d91233.
//
// Solidity: function processUintArray(uint256[] input) returns(uint256[])
func (_NetworkDebugContract *NetworkDebugContractSession) ProcessUintArray(input []*big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessUintArray(&_NetworkDebugContract.TransactOpts, input)
}

// ProcessUintArray is a paid mutator transaction binding the contract method 0x12d91233.
//
// Solidity: function processUintArray(uint256[] input) returns(uint256[])
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ProcessUintArray(input []*big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ProcessUintArray(&_NetworkDebugContract.TransactOpts, input)
}

// ResetCounter is a paid mutator transaction binding the contract method 0xf3396bd9.
//
// Solidity: function resetCounter(int256 idx) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) ResetCounter(opts *bind.TransactOpts, idx *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "resetCounter", idx)
}

// ResetCounter is a paid mutator transaction binding the contract method 0xf3396bd9.
//
// Solidity: function resetCounter(int256 idx) returns()
func (_NetworkDebugContract *NetworkDebugContractSession) ResetCounter(idx *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ResetCounter(&_NetworkDebugContract.TransactOpts, idx)
}

// ResetCounter is a paid mutator transaction binding the contract method 0xf3396bd9.
//
// Solidity: function resetCounter(int256 idx) returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) ResetCounter(idx *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.ResetCounter(&_NetworkDebugContract.TransactOpts, idx)
}

// Set is a paid mutator transaction binding the contract method 0xe5c19b2d.
//
// Solidity: function set(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactor) Set(opts *bind.TransactOpts, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "set", x)
}

// Set is a paid mutator transaction binding the contract method 0xe5c19b2d.
//
// Solidity: function set(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractSession) Set(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Set(&_NetworkDebugContract.TransactOpts, x)
}

// Set is a paid mutator transaction binding the contract method 0xe5c19b2d.
//
// Solidity: function set(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) Set(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Set(&_NetworkDebugContract.TransactOpts, x)
}

// SetMap is a paid mutator transaction binding the contract method 0xe8116e28.
//
// Solidity: function setMap(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactor) SetMap(opts *bind.TransactOpts, x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "setMap", x)
}

// SetMap is a paid mutator transaction binding the contract method 0xe8116e28.
//
// Solidity: function setMap(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractSession) SetMap(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.SetMap(&_NetworkDebugContract.TransactOpts, x)
}

// SetMap is a paid mutator transaction binding the contract method 0xe8116e28.
//
// Solidity: function setMap(int256 x) returns(int256 value)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) SetMap(x *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.SetMap(&_NetworkDebugContract.TransactOpts, x)
}

// SetStatus is a paid mutator transaction binding the contract method 0x2e49d78b.
//
// Solidity: function setStatus(uint8 status) returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractTransactor) SetStatus(opts *bind.TransactOpts, status uint8) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "setStatus", status)
}

// SetStatus is a paid mutator transaction binding the contract method 0x2e49d78b.
//
// Solidity: function setStatus(uint8 status) returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractSession) SetStatus(status uint8) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.SetStatus(&_NetworkDebugContract.TransactOpts, status)
}

// SetStatus is a paid mutator transaction binding the contract method 0x2e49d78b.
//
// Solidity: function setStatus(uint8 status) returns(uint8)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) SetStatus(status uint8) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.SetStatus(&_NetworkDebugContract.TransactOpts, status)
}

// Trace is a paid mutator transaction binding the contract method 0x3e41f135.
//
// Solidity: function trace(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactor) Trace(opts *bind.TransactOpts, x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "trace", x, y)
}

// Trace is a paid mutator transaction binding the contract method 0x3e41f135.
//
// Solidity: function trace(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) Trace(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Trace(&_NetworkDebugContract.TransactOpts, x, y)
}

// Trace is a paid mutator transaction binding the contract method 0x3e41f135.
//
// Solidity: function trace(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) Trace(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Trace(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceDifferent is a paid mutator transaction binding the contract method 0x30985bcc.
//
// Solidity: function traceDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactor) TraceDifferent(opts *bind.TransactOpts, x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "traceDifferent", x, y)
}

// TraceDifferent is a paid mutator transaction binding the contract method 0x30985bcc.
//
// Solidity: function traceDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) TraceDifferent(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceDifferent(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceDifferent is a paid mutator transaction binding the contract method 0x30985bcc.
//
// Solidity: function traceDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) TraceDifferent(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceDifferent(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceSubWithCallback is a paid mutator transaction binding the contract method 0x3837a75e.
//
// Solidity: function traceSubWithCallback(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactor) TraceSubWithCallback(opts *bind.TransactOpts, x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "traceSubWithCallback", x, y)
}

// TraceSubWithCallback is a paid mutator transaction binding the contract method 0x3837a75e.
//
// Solidity: function traceSubWithCallback(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) TraceSubWithCallback(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceSubWithCallback(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceSubWithCallback is a paid mutator transaction binding the contract method 0x3837a75e.
//
// Solidity: function traceSubWithCallback(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) TraceSubWithCallback(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceSubWithCallback(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceYetDifferent is a paid mutator transaction binding the contract method 0x58379d71.
//
// Solidity: function traceYetDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactor) TraceYetDifferent(opts *bind.TransactOpts, x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.Transact(opts, "traceYetDifferent", x, y)
}

// TraceYetDifferent is a paid mutator transaction binding the contract method 0x58379d71.
//
// Solidity: function traceYetDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractSession) TraceYetDifferent(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceYetDifferent(&_NetworkDebugContract.TransactOpts, x, y)
}

// TraceYetDifferent is a paid mutator transaction binding the contract method 0x58379d71.
//
// Solidity: function traceYetDifferent(int256 x, int256 y) returns(int256)
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) TraceYetDifferent(x *big.Int, y *big.Int) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.TraceYetDifferent(&_NetworkDebugContract.TransactOpts, x, y)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_NetworkDebugContract *NetworkDebugContractSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Fallback(&_NetworkDebugContract.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Fallback(&_NetworkDebugContract.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NetworkDebugContract.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_NetworkDebugContract *NetworkDebugContractSession) Receive() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Receive(&_NetworkDebugContract.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_NetworkDebugContract *NetworkDebugContractTransactorSession) Receive() (*types.Transaction, error) {
	return _NetworkDebugContract.Contract.Receive(&_NetworkDebugContract.TransactOpts)
}

// NetworkDebugContractCallbackEventIterator is returned from FilterCallbackEvent and is used to iterate over the raw logs and unpacked data for CallbackEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractCallbackEventIterator struct {
	Event *NetworkDebugContractCallbackEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractCallbackEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractCallbackEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractCallbackEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractCallbackEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractCallbackEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractCallbackEvent represents a CallbackEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractCallbackEvent struct {
	A   *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCallbackEvent is a free log retrieval operation binding the contract event 0xb16dba9242e1aa07ccc47228094628f72c8cc9699ee45d5bc8d67b84d3038c68.
//
// Solidity: event CallbackEvent(int256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterCallbackEvent(opts *bind.FilterOpts, a []*big.Int) (*NetworkDebugContractCallbackEventIterator, error) {

	var aRule []interface{}
	for _, aItem := range a {
		aRule = append(aRule, aItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "CallbackEvent", aRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractCallbackEventIterator{contract: _NetworkDebugContract.contract, event: "CallbackEvent", logs: logs, sub: sub}, nil
}

// WatchCallbackEvent is a free log subscription operation binding the contract event 0xb16dba9242e1aa07ccc47228094628f72c8cc9699ee45d5bc8d67b84d3038c68.
//
// Solidity: event CallbackEvent(int256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchCallbackEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractCallbackEvent, a []*big.Int) (event.Subscription, error) {

	var aRule []interface{}
	for _, aItem := range a {
		aRule = append(aRule, aItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "CallbackEvent", aRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractCallbackEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "CallbackEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallbackEvent is a log parse operation binding the contract event 0xb16dba9242e1aa07ccc47228094628f72c8cc9699ee45d5bc8d67b84d3038c68.
//
// Solidity: event CallbackEvent(int256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseCallbackEvent(log types.Log) (*NetworkDebugContractCallbackEvent, error) {
	event := new(NetworkDebugContractCallbackEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "CallbackEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractCurrentStatusIterator is returned from FilterCurrentStatus and is used to iterate over the raw logs and unpacked data for CurrentStatus events raised by the NetworkDebugContract contract.
type NetworkDebugContractCurrentStatusIterator struct {
	Event *NetworkDebugContractCurrentStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractCurrentStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractCurrentStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractCurrentStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractCurrentStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractCurrentStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractCurrentStatus represents a CurrentStatus event raised by the NetworkDebugContract contract.
type NetworkDebugContractCurrentStatus struct {
	Status uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCurrentStatus is a free log retrieval operation binding the contract event 0xbea054406fdf249b05d1aef1b5f848d62d902d94389fca702b2d8337677c359a.
//
// Solidity: event CurrentStatus(uint8 indexed status)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterCurrentStatus(opts *bind.FilterOpts, status []uint8) (*NetworkDebugContractCurrentStatusIterator, error) {

	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "CurrentStatus", statusRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractCurrentStatusIterator{contract: _NetworkDebugContract.contract, event: "CurrentStatus", logs: logs, sub: sub}, nil
}

// WatchCurrentStatus is a free log subscription operation binding the contract event 0xbea054406fdf249b05d1aef1b5f848d62d902d94389fca702b2d8337677c359a.
//
// Solidity: event CurrentStatus(uint8 indexed status)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchCurrentStatus(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractCurrentStatus, status []uint8) (event.Subscription, error) {

	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "CurrentStatus", statusRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractCurrentStatus)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "CurrentStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCurrentStatus is a log parse operation binding the contract event 0xbea054406fdf249b05d1aef1b5f848d62d902d94389fca702b2d8337677c359a.
//
// Solidity: event CurrentStatus(uint8 indexed status)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseCurrentStatus(log types.Log) (*NetworkDebugContractCurrentStatus, error) {
	event := new(NetworkDebugContractCurrentStatus)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "CurrentStatus", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractEtherReceivedIterator is returned from FilterEtherReceived and is used to iterate over the raw logs and unpacked data for EtherReceived events raised by the NetworkDebugContract contract.
type NetworkDebugContractEtherReceivedIterator struct {
	Event *NetworkDebugContractEtherReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractEtherReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractEtherReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractEtherReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractEtherReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractEtherReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractEtherReceived represents a EtherReceived event raised by the NetworkDebugContract contract.
type NetworkDebugContractEtherReceived struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEtherReceived is a free log retrieval operation binding the contract event 0x1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b.
//
// Solidity: event EtherReceived(address sender, uint256 amount)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterEtherReceived(opts *bind.FilterOpts) (*NetworkDebugContractEtherReceivedIterator, error) {

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "EtherReceived")
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractEtherReceivedIterator{contract: _NetworkDebugContract.contract, event: "EtherReceived", logs: logs, sub: sub}, nil
}

// WatchEtherReceived is a free log subscription operation binding the contract event 0x1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b.
//
// Solidity: event EtherReceived(address sender, uint256 amount)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchEtherReceived(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractEtherReceived) (event.Subscription, error) {

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "EtherReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractEtherReceived)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "EtherReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEtherReceived is a log parse operation binding the contract event 0x1e57e3bb474320be3d2c77138f75b7c3941292d647f5f9634e33a8e94e0e069b.
//
// Solidity: event EtherReceived(address sender, uint256 amount)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseEtherReceived(log types.Log) (*NetworkDebugContractEtherReceived, error) {
	event := new(NetworkDebugContractEtherReceived)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "EtherReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractNoIndexEventIterator is returned from FilterNoIndexEvent and is used to iterate over the raw logs and unpacked data for NoIndexEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexEventIterator struct {
	Event *NetworkDebugContractNoIndexEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractNoIndexEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractNoIndexEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractNoIndexEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractNoIndexEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractNoIndexEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractNoIndexEvent represents a NoIndexEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexEvent struct {
	Sender common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNoIndexEvent is a free log retrieval operation binding the contract event 0x33bc9bae48dbe1e057f264b3fc6a1dacdcceacb3ba28d937231c70e068a02f1c.
//
// Solidity: event NoIndexEvent(address sender)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterNoIndexEvent(opts *bind.FilterOpts) (*NetworkDebugContractNoIndexEventIterator, error) {

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "NoIndexEvent")
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractNoIndexEventIterator{contract: _NetworkDebugContract.contract, event: "NoIndexEvent", logs: logs, sub: sub}, nil
}

// WatchNoIndexEvent is a free log subscription operation binding the contract event 0x33bc9bae48dbe1e057f264b3fc6a1dacdcceacb3ba28d937231c70e068a02f1c.
//
// Solidity: event NoIndexEvent(address sender)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchNoIndexEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractNoIndexEvent) (event.Subscription, error) {

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "NoIndexEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractNoIndexEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoIndexEvent is a log parse operation binding the contract event 0x33bc9bae48dbe1e057f264b3fc6a1dacdcceacb3ba28d937231c70e068a02f1c.
//
// Solidity: event NoIndexEvent(address sender)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseNoIndexEvent(log types.Log) (*NetworkDebugContractNoIndexEvent, error) {
	event := new(NetworkDebugContractNoIndexEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractNoIndexEventStringIterator is returned from FilterNoIndexEventString and is used to iterate over the raw logs and unpacked data for NoIndexEventString events raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexEventStringIterator struct {
	Event *NetworkDebugContractNoIndexEventString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractNoIndexEventStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractNoIndexEventString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractNoIndexEventString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractNoIndexEventStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractNoIndexEventStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractNoIndexEventString represents a NoIndexEventString event raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexEventString struct {
	Str string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterNoIndexEventString is a free log retrieval operation binding the contract event 0x25b7adba1b046a19379db4bc06aa1f2e71604d7b599a0ee8783d58110f00e16a.
//
// Solidity: event NoIndexEventString(string str)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterNoIndexEventString(opts *bind.FilterOpts) (*NetworkDebugContractNoIndexEventStringIterator, error) {

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "NoIndexEventString")
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractNoIndexEventStringIterator{contract: _NetworkDebugContract.contract, event: "NoIndexEventString", logs: logs, sub: sub}, nil
}

// WatchNoIndexEventString is a free log subscription operation binding the contract event 0x25b7adba1b046a19379db4bc06aa1f2e71604d7b599a0ee8783d58110f00e16a.
//
// Solidity: event NoIndexEventString(string str)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchNoIndexEventString(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractNoIndexEventString) (event.Subscription, error) {

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "NoIndexEventString")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractNoIndexEventString)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexEventString", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoIndexEventString is a log parse operation binding the contract event 0x25b7adba1b046a19379db4bc06aa1f2e71604d7b599a0ee8783d58110f00e16a.
//
// Solidity: event NoIndexEventString(string str)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseNoIndexEventString(log types.Log) (*NetworkDebugContractNoIndexEventString, error) {
	event := new(NetworkDebugContractNoIndexEventString)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexEventString", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractNoIndexStructEventIterator is returned from FilterNoIndexStructEvent and is used to iterate over the raw logs and unpacked data for NoIndexStructEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexStructEventIterator struct {
	Event *NetworkDebugContractNoIndexStructEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractNoIndexStructEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractNoIndexStructEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractNoIndexStructEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractNoIndexStructEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractNoIndexStructEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractNoIndexStructEvent represents a NoIndexStructEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractNoIndexStructEvent struct {
	A   NetworkDebugContractAccount
	Raw types.Log // Blockchain specific contextual infos
}

// FilterNoIndexStructEvent is a free log retrieval operation binding the contract event 0xebe3ff7e2071d351bf2e65b4fccd24e3ae99485f02468f1feecf7d64dc044188.
//
// Solidity: event NoIndexStructEvent((string,uint64,uint256) a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterNoIndexStructEvent(opts *bind.FilterOpts) (*NetworkDebugContractNoIndexStructEventIterator, error) {

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "NoIndexStructEvent")
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractNoIndexStructEventIterator{contract: _NetworkDebugContract.contract, event: "NoIndexStructEvent", logs: logs, sub: sub}, nil
}

// WatchNoIndexStructEvent is a free log subscription operation binding the contract event 0xebe3ff7e2071d351bf2e65b4fccd24e3ae99485f02468f1feecf7d64dc044188.
//
// Solidity: event NoIndexStructEvent((string,uint64,uint256) a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchNoIndexStructEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractNoIndexStructEvent) (event.Subscription, error) {

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "NoIndexStructEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractNoIndexStructEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexStructEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNoIndexStructEvent is a log parse operation binding the contract event 0xebe3ff7e2071d351bf2e65b4fccd24e3ae99485f02468f1feecf7d64dc044188.
//
// Solidity: event NoIndexStructEvent((string,uint64,uint256) a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseNoIndexStructEvent(log types.Log) (*NetworkDebugContractNoIndexStructEvent, error) {
	event := new(NetworkDebugContractNoIndexStructEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "NoIndexStructEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractOneIndexEventIterator is returned from FilterOneIndexEvent and is used to iterate over the raw logs and unpacked data for OneIndexEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractOneIndexEventIterator struct {
	Event *NetworkDebugContractOneIndexEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractOneIndexEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractOneIndexEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractOneIndexEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractOneIndexEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractOneIndexEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractOneIndexEvent represents a OneIndexEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractOneIndexEvent struct {
	A   *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOneIndexEvent is a free log retrieval operation binding the contract event 0xeace1be0b97ec11f959499c07b9f60f0cc47bf610b28fda8fb0e970339cf3b35.
//
// Solidity: event OneIndexEvent(uint256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterOneIndexEvent(opts *bind.FilterOpts, a []*big.Int) (*NetworkDebugContractOneIndexEventIterator, error) {

	var aRule []interface{}
	for _, aItem := range a {
		aRule = append(aRule, aItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "OneIndexEvent", aRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractOneIndexEventIterator{contract: _NetworkDebugContract.contract, event: "OneIndexEvent", logs: logs, sub: sub}, nil
}

// WatchOneIndexEvent is a free log subscription operation binding the contract event 0xeace1be0b97ec11f959499c07b9f60f0cc47bf610b28fda8fb0e970339cf3b35.
//
// Solidity: event OneIndexEvent(uint256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchOneIndexEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractOneIndexEvent, a []*big.Int) (event.Subscription, error) {

	var aRule []interface{}
	for _, aItem := range a {
		aRule = append(aRule, aItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "OneIndexEvent", aRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractOneIndexEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "OneIndexEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOneIndexEvent is a log parse operation binding the contract event 0xeace1be0b97ec11f959499c07b9f60f0cc47bf610b28fda8fb0e970339cf3b35.
//
// Solidity: event OneIndexEvent(uint256 indexed a)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseOneIndexEvent(log types.Log) (*NetworkDebugContractOneIndexEvent, error) {
	event := new(NetworkDebugContractOneIndexEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "OneIndexEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractReceivedIterator is returned from FilterReceived and is used to iterate over the raw logs and unpacked data for Received events raised by the NetworkDebugContract contract.
type NetworkDebugContractReceivedIterator struct {
	Event *NetworkDebugContractReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractReceived represents a Received event raised by the NetworkDebugContract contract.
type NetworkDebugContractReceived struct {
	Caller  common.Address
	Amount  *big.Int
	Message string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReceived is a free log retrieval operation binding the contract event 0x59e04c3f0d44b7caf6e8ef854b61d9a51cf1960d7a88ff6356cc5e946b4b5832.
//
// Solidity: event Received(address caller, uint256 amount, string message)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterReceived(opts *bind.FilterOpts) (*NetworkDebugContractReceivedIterator, error) {

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractReceivedIterator{contract: _NetworkDebugContract.contract, event: "Received", logs: logs, sub: sub}, nil
}

// WatchReceived is a free log subscription operation binding the contract event 0x59e04c3f0d44b7caf6e8ef854b61d9a51cf1960d7a88ff6356cc5e946b4b5832.
//
// Solidity: event Received(address caller, uint256 amount, string message)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchReceived(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractReceived) (event.Subscription, error) {

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractReceived)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "Received", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceived is a log parse operation binding the contract event 0x59e04c3f0d44b7caf6e8ef854b61d9a51cf1960d7a88ff6356cc5e946b4b5832.
//
// Solidity: event Received(address caller, uint256 amount, string message)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseReceived(log types.Log) (*NetworkDebugContractReceived, error) {
	event := new(NetworkDebugContractReceived)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "Received", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator is returned from FilterThreeIndexAndOneNonIndexedEvent and is used to iterate over the raw logs and unpacked data for ThreeIndexAndOneNonIndexedEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator struct {
	Event *NetworkDebugContractThreeIndexAndOneNonIndexedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractThreeIndexAndOneNonIndexedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractThreeIndexAndOneNonIndexedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractThreeIndexAndOneNonIndexedEvent represents a ThreeIndexAndOneNonIndexedEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractThreeIndexAndOneNonIndexedEvent struct {
	RoundId   *big.Int
	StartedBy common.Address
	StartedAt *big.Int
	DataId    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterThreeIndexAndOneNonIndexedEvent is a free log retrieval operation binding the contract event 0x56c2ea44ba516098cee0c181dd9d8db262657368b6e911e83ae0ccfae806c73d.
//
// Solidity: event ThreeIndexAndOneNonIndexedEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt, string dataId)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterThreeIndexAndOneNonIndexedEvent(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address, startedAt []*big.Int) (*NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}
	var startedAtRule []interface{}
	for _, startedAtItem := range startedAt {
		startedAtRule = append(startedAtRule, startedAtItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "ThreeIndexAndOneNonIndexedEvent", roundIdRule, startedByRule, startedAtRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractThreeIndexAndOneNonIndexedEventIterator{contract: _NetworkDebugContract.contract, event: "ThreeIndexAndOneNonIndexedEvent", logs: logs, sub: sub}, nil
}

// WatchThreeIndexAndOneNonIndexedEvent is a free log subscription operation binding the contract event 0x56c2ea44ba516098cee0c181dd9d8db262657368b6e911e83ae0ccfae806c73d.
//
// Solidity: event ThreeIndexAndOneNonIndexedEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt, string dataId)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchThreeIndexAndOneNonIndexedEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractThreeIndexAndOneNonIndexedEvent, roundId []*big.Int, startedBy []common.Address, startedAt []*big.Int) (event.Subscription, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}
	var startedAtRule []interface{}
	for _, startedAtItem := range startedAt {
		startedAtRule = append(startedAtRule, startedAtItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "ThreeIndexAndOneNonIndexedEvent", roundIdRule, startedByRule, startedAtRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractThreeIndexAndOneNonIndexedEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "ThreeIndexAndOneNonIndexedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThreeIndexAndOneNonIndexedEvent is a log parse operation binding the contract event 0x56c2ea44ba516098cee0c181dd9d8db262657368b6e911e83ae0ccfae806c73d.
//
// Solidity: event ThreeIndexAndOneNonIndexedEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt, string dataId)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseThreeIndexAndOneNonIndexedEvent(log types.Log) (*NetworkDebugContractThreeIndexAndOneNonIndexedEvent, error) {
	event := new(NetworkDebugContractThreeIndexAndOneNonIndexedEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "ThreeIndexAndOneNonIndexedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractThreeIndexEventIterator is returned from FilterThreeIndexEvent and is used to iterate over the raw logs and unpacked data for ThreeIndexEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractThreeIndexEventIterator struct {
	Event *NetworkDebugContractThreeIndexEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractThreeIndexEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractThreeIndexEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractThreeIndexEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractThreeIndexEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractThreeIndexEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractThreeIndexEvent represents a ThreeIndexEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractThreeIndexEvent struct {
	RoundId   *big.Int
	StartedBy common.Address
	StartedAt *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterThreeIndexEvent is a free log retrieval operation binding the contract event 0x5660e8f93f0146f45abcd659e026b75995db50053cbbca4d7f365934ade68bf3.
//
// Solidity: event ThreeIndexEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterThreeIndexEvent(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address, startedAt []*big.Int) (*NetworkDebugContractThreeIndexEventIterator, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}
	var startedAtRule []interface{}
	for _, startedAtItem := range startedAt {
		startedAtRule = append(startedAtRule, startedAtItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "ThreeIndexEvent", roundIdRule, startedByRule, startedAtRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractThreeIndexEventIterator{contract: _NetworkDebugContract.contract, event: "ThreeIndexEvent", logs: logs, sub: sub}, nil
}

// WatchThreeIndexEvent is a free log subscription operation binding the contract event 0x5660e8f93f0146f45abcd659e026b75995db50053cbbca4d7f365934ade68bf3.
//
// Solidity: event ThreeIndexEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchThreeIndexEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractThreeIndexEvent, roundId []*big.Int, startedBy []common.Address, startedAt []*big.Int) (event.Subscription, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}
	var startedAtRule []interface{}
	for _, startedAtItem := range startedAt {
		startedAtRule = append(startedAtRule, startedAtItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "ThreeIndexEvent", roundIdRule, startedByRule, startedAtRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractThreeIndexEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "ThreeIndexEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseThreeIndexEvent is a log parse operation binding the contract event 0x5660e8f93f0146f45abcd659e026b75995db50053cbbca4d7f365934ade68bf3.
//
// Solidity: event ThreeIndexEvent(uint256 indexed roundId, address indexed startedBy, uint256 indexed startedAt)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseThreeIndexEvent(log types.Log) (*NetworkDebugContractThreeIndexEvent, error) {
	event := new(NetworkDebugContractThreeIndexEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "ThreeIndexEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NetworkDebugContractTwoIndexEventIterator is returned from FilterTwoIndexEvent and is used to iterate over the raw logs and unpacked data for TwoIndexEvent events raised by the NetworkDebugContract contract.
type NetworkDebugContractTwoIndexEventIterator struct {
	Event *NetworkDebugContractTwoIndexEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NetworkDebugContractTwoIndexEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NetworkDebugContractTwoIndexEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NetworkDebugContractTwoIndexEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NetworkDebugContractTwoIndexEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NetworkDebugContractTwoIndexEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NetworkDebugContractTwoIndexEvent represents a TwoIndexEvent event raised by the NetworkDebugContract contract.
type NetworkDebugContractTwoIndexEvent struct {
	RoundId   *big.Int
	StartedBy common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTwoIndexEvent is a free log retrieval operation binding the contract event 0x33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b5.
//
// Solidity: event TwoIndexEvent(uint256 indexed roundId, address indexed startedBy)
func (_NetworkDebugContract *NetworkDebugContractFilterer) FilterTwoIndexEvent(opts *bind.FilterOpts, roundId []*big.Int, startedBy []common.Address) (*NetworkDebugContractTwoIndexEventIterator, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.FilterLogs(opts, "TwoIndexEvent", roundIdRule, startedByRule)
	if err != nil {
		return nil, err
	}
	return &NetworkDebugContractTwoIndexEventIterator{contract: _NetworkDebugContract.contract, event: "TwoIndexEvent", logs: logs, sub: sub}, nil
}

// WatchTwoIndexEvent is a free log subscription operation binding the contract event 0x33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b5.
//
// Solidity: event TwoIndexEvent(uint256 indexed roundId, address indexed startedBy)
func (_NetworkDebugContract *NetworkDebugContractFilterer) WatchTwoIndexEvent(opts *bind.WatchOpts, sink chan<- *NetworkDebugContractTwoIndexEvent, roundId []*big.Int, startedBy []common.Address) (event.Subscription, error) {

	var roundIdRule []interface{}
	for _, roundIdItem := range roundId {
		roundIdRule = append(roundIdRule, roundIdItem)
	}
	var startedByRule []interface{}
	for _, startedByItem := range startedBy {
		startedByRule = append(startedByRule, startedByItem)
	}

	logs, sub, err := _NetworkDebugContract.contract.WatchLogs(opts, "TwoIndexEvent", roundIdRule, startedByRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NetworkDebugContractTwoIndexEvent)
				if err := _NetworkDebugContract.contract.UnpackLog(event, "TwoIndexEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTwoIndexEvent is a log parse operation binding the contract event 0x33b47a1cd66813164ec00800d74296f57415217c22505ee380594a712936a0b5.
//
// Solidity: event TwoIndexEvent(uint256 indexed roundId, address indexed startedBy)
func (_NetworkDebugContract *NetworkDebugContractFilterer) ParseTwoIndexEvent(log types.Log) (*NetworkDebugContractTwoIndexEvent, error) {
	event := new(NetworkDebugContractTwoIndexEvent)
	if err := _NetworkDebugContract.contract.UnpackLog(event, "TwoIndexEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
